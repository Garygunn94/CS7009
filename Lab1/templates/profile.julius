function CompanyBubble() {
  d3.select("svg").selectAll("*").remove();
  var e=document.getElementsByName("CompanyBubble")[0];
  var responsei = $.ajax({
          url: "http://localhost:8081/companyBubble/".concat(e.value),
          type: "get",
          contentType: "text/plain",
          dataType: "json",
          crossDomain:true,
          success: function( datar ) {
              console.log(datar)
              var data = [];
              for(var i = 0; i<datar.id_ub.length; i++) {
                
                      data[i] = {id: (datar.id_ub[i]), value: (datar.value_ub[i]), class: (datar.id_ub[i])}   
                 }
              var svg = d3.select("svg"),
                  width = +svg.attr("width"),
                  height = +svg.attr("height");

              var color = d3.scaleOrdinal(d3.schemeCategory20);

              var simulation = d3.forceSimulation()
                  .force('charge', d3.forceManyBody())
                  .force("center", d3.forceCenter(width / 2, height / 2));


              var node = svg.append("g")
                  .attr("class", "nodes")
                .selectAll("circle")
                .data(data)
                .enter().append("circle")
                  .attr("r", function(d) {return Math.sqrt(d.value);})
                  .attr("fill", function(d) { return color(d.id); })
                  .call(d3.drag()
                      .on("start", dragstarted)
                      .on("drag", dragged)
                      .on("end", dragended));

              node.append("title")
                  .text(function(d) { return (d.id.concat(", ").concat(d.value)); });

              simulation
                  .nodes(data)
                  .on("tick", ticked);

            

              function ticked() {
                node
                    .attr("cx", function(d) { return d.x; })
                    .attr("cy", function(d) { return d.y; });
              }

            function dragstarted(d) {
              if (!d3.event.active) simulation.alphaTarget(0.3).restart();
              d.fx = d.x;
              d.fy = d.y;
            }

            function dragged(d) {
              d.fx = d3.event.x;
              d.fy = d3.event.y;
            }

            function dragended(d) {
              if (!d3.event.active) simulation.alphaTarget(0);
              d.fx = null;
              d.fy = null;
            }
        },
        error: function( status ) {
          console.log("failed");
        }
  })
}

function LocationBubble() {
  d3.select("svg").selectAll("*").remove();
  var e=document.getElementsByName("LocationBubble")[0];
  var responsei = $.ajax({
          url: "http://localhost:8081/locationBubble/".concat(e.value),
          type: "get",
          contentType: "text/plain",
          dataType: "json",
          crossDomain:true,
          success: function( datar ) {
              console.log(datar)
              var data = [];
              for(var i = 0; i<datar.id_ub.length; i++) {
                
                      data[i] = {id: (datar.id_ub[i]), value: (datar.value_ub[i]), class: (datar.id_ub[i])}   
                 }
              var svg = d3.select("svg"),
                  width = +svg.attr("width"),
                  height = +svg.attr("height");

              var color = d3.scaleOrdinal(d3.schemeCategory20);

              var simulation = d3.forceSimulation()
                  .force('charge', d3.forceManyBody())
                  .force("center", d3.forceCenter(width / 2, height / 2));


              var node = svg.append("g")
                  .attr("class", "nodes")
                .selectAll("circle")
                .data(data)
                .enter().append("circle")
                  .attr("r", function(d) {return Math.sqrt(d.value);})
                  .attr("fill", function(d) { return color(d.id); })
                  .call(d3.drag()
                      .on("start", dragstarted)
                      .on("drag", dragged)
                      .on("end", dragended));

              node.append("title")
                  .text(function(d) { return (d.id.concat(", ").concat(d.value)); });

              simulation
                  .nodes(data)
                  .on("tick", ticked);

            

              function ticked() {
                node
                    .attr("cx", function(d) { return d.x; })
                    .attr("cy", function(d) { return d.y; });
              }

            function dragstarted(d) {
              if (!d3.event.active) simulation.alphaTarget(0.3).restart();
              d.fx = d.x;
              d.fy = d.y;
            }

            function dragged(d) {
              d.fx = d3.event.x;
              d.fy = d3.event.y;
            }

            function dragended(d) {
              if (!d3.event.active) simulation.alphaTarget(0);
              d.fx = null;
              d.fy = null;
            }
        },
        error: function( status ) {
          console.log("failed");
        }
  })
}

function UserBubble() {
  d3.select("svg").selectAll("*").remove();
  var e=document.getElementsByName("UserBubble")[0];
  var responsei = $.ajax({
          url: "http://localhost:8081/userBubble/".concat(e.value),
          type: "get",
          contentType: "text/plain",
          dataType: "json",
          crossDomain:true,
          success: function( datar ) {
              console.log(datar)
              var data = [];
              for(var i = 0; i<datar.id_ub.length; i++) {
                
                      data[i] = {id: (datar.id_ub[i]), value: (datar.value_ub[i]), class: (datar.id_ub[i])}   
                 }
              var svg = d3.select("svg"),
                  width = +svg.attr("width"),
                  height = +svg.attr("height");

              var color = d3.scaleOrdinal(d3.schemeCategory20);

              var simulation = d3.forceSimulation()
                  .force('charge', d3.forceManyBody())
                  .force("center", d3.forceCenter(width / 2, height / 2));


              var node = svg.append("g")
                  .attr("class", "nodes")
                .selectAll("circle")
                .data(data)
                .enter().append("circle")
                  .attr("r", function(d) {return Math.sqrt(d.value);})
                  .attr("fill", function(d) { return color(d.id); })
                  .call(d3.drag()
                      .on("start", dragstarted)
                      .on("drag", dragged)
                      .on("end", dragended));

              node.append("title")
                  .text(function(d) { return (d.id.concat(", ").concat(d.value)); });

              simulation
                  .nodes(data)
                  .on("tick", ticked);

            

              function ticked() {
                node
                    .attr("cx", function(d) { return d.x; })
                    .attr("cy", function(d) { return d.y; });
              }

            function dragstarted(d) {
              if (!d3.event.active) simulation.alphaTarget(0.3).restart();
              d.fx = d.x;
              d.fy = d.y;
            }

            function dragged(d) {
              d.fx = d3.event.x;
              d.fy = d3.event.y;
            }

            function dragended(d) {
              if (!d3.event.active) simulation.alphaTarget(0);
              d.fx = null;
              d.fy = null;
            }
        },
        error: function( status ) {
          console.log("failed");
        }
  })
}

function LanguageRank() {
  d3.select("svg").selectAll("*").remove();
  var responsei = $.ajax({
          url: "http://localhost:8081/languageChart",
          type: "get",
          contentType: "text/plain",
          dataType: "json",
          crossDomain:true,
          success: function( datar ) {
              console.log(datar)
              var data = []
              for(var i = 0; i<datar.language.length; i++) {
                     data[i] = {language: (datar.language[i]), frequency: (datar.frequency[i])}
                 }
            

              var svg = d3.select("svg"),
                  margin = {top: 20, right: 20, bottom: 30, left: 40},
                  width = +svg.attr("width") - margin.left - margin.right,
                  height = +svg.attr("height") - margin.top - margin.bottom;

              var x = d3.scaleBand().rangeRound([0, width]).padding(0.1),
                  y = d3.scaleLinear().rangeRound([height, 0]);

              var g = svg.append("g")
                  .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


              x.domain(data.map(function(d) { return d.language; }));
              y.domain([0, d3.max(data, function(d) { return d.frequency; })]);

              g.append("g")
                  .attr("class", "axis axis--x")
                  .attr("transform", "translate(0," + height + ")")
                  .call(d3.axisBottom(x));

              g.append("g")
                  .attr("class", "axis axis--y")
                  .call(d3.axisLeft(y).ticks(10))
                .append("text")
                  .attr("transform", "rotate(-90)")
                  .attr("y", 6)
                  .attr("dy", "0.71em")
                  .attr("text-anchor", "end")
                  .text("Frequency");

              g.selectAll("bar")
                .data(data)
                .enter().append("rect")
                  .attr("class", "bar")
                  .attr("x", function(d) { return x(d.language); })
                  .attr("y", function(d) { return y(d.frequency); })
                  .attr("width", x.bandwidth())
                  .attr("height", function(d) { return height - y(d.frequency); });
            
            
          },
          error: function( status ) {
          console.log("failed");
          }
  })
}


function RepoSize() {
  d3.select("svg").selectAll("*").remove();
  var responsei = $.ajax({
          url: "http://localhost:8081/RepoSizeChart",
          type: "get",
          contentType: "text/plain",
          dataType: "json",
          crossDomain:true,
          success: function( datar ) {
              console.log(datar)
              var data = [];
              for(var i = 0; i<datar.user.length; i++) {
                
                      data[i] = {repo: (datar.repo[i]), user: (datar.user[i]), name: (datar.name[i]), language: (datar.languager[i])}   
                 }

              for(var i = 0; i<data.length; i++){
                if (data[i].repo > 300000)
                  data.splice(i,1);
              }
            

              var svg = d3.select("svg"),
                  margin = {top: 20, right: 20, bottom: 30, left: 100},
                  width = +svg.attr("width") - margin.left - margin.right,
                  height = +svg.attr("height") - margin.top - margin.bottom;

              /* 
               * value accessor - returns the value to encode for a given data object.
               * scale - maps value to a visual display encoding, such as a pixel position.
               * map function - maps from data value to display value
               * axis - sets up axis
               */ 

              // setup x 
              var xValue = function(d) { return d.repo;}, // data -> value
                  xScale = d3.scaleLinear().rangeRound([0, width]), // value -> display
                  xMap = function(d) { return xScale(xValue(d));}, // data -> display
                  xAxis = d3.axisBottom(xScale);

              // setup y
              var yValue = function(d) { return d.user;}, // data -> value
                  yScale = d3.scaleLinear().rangeRound([height, 0]), // value -> display
                  yMap = function(d) { return yScale(yValue(d));}, // data -> display
                  yAxis = d3.axisLeft(yScale);

              // setup fill color
              var cValue = function(d) { return d.language;},
                  color = d3.scaleOrdinal(["#3957ff", "#d3fe14", "#c9080a", "#fec7f8", "#0b7b3e", "#0bf0e9", "#c203c8", "#fd9b39", "#888593", "#906407", "#98ba7f", "#fe6794", "#10b0ff", "#ac7bff", "#fee7c0", "#964c63", "#1da49c", "#0ad811", "#bbd9fd", "#fe6cfe", "#297192", "#d1a09c", "#78579e", "#81ffad", "#739400", "#ca6949", "#d9bf01", "#646a58", "#d5097e", "#bb73a9", "#ccf6e9", "#9cb4b6", "#b6a7d4"]);

              // add the graph canvas to the body of the webpage
              //var svg = d3.select("body").append("svg")
              //    .attr("width", width + margin.left + margin.right)
              //    .attr("height", height + margin.top + margin.bottom)
              //  .append("g")
              //    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

              // add the tooltip area to the webpage
              var tooltip = d3.select("body").append("div")
                  .attr("class", "tooltip")
                  .style("opacity", 0);

              // load data
      

              // change string (from CSV) into number format
              //data.forEach(function(d) {
              //  d.repo = +d.repo;
              //  d.user = +d.user;
            //    console.log(d);
              //};
           

              // don't want dots overlapping axis, so add in buffer to data domain
              xScale.domain([d3.min(data, xValue)-1, d3.max(data, xValue)+1]);
              yScale.domain([d3.min(data, yValue)-1, d3.max(data, yValue)+1]);

              // x-axis
              svg.append("g")
                  .attr("class", "x axis")
                  .attr("transform", "translate(0," + height + ")")
                  .call(xAxis)
                .append("text")
                  .attr("class", "label")
                  .attr("x", width)
                  .attr("y", -6)
                  .style("text-anchor", "end")
                  .text("Repo Size (Mb)");

              // y-axis
              svg.append("g")
                  .attr("class", "y axis")
                  .call(yAxis)
                .append("text")
                  .attr("class", "label")
                  .attr("transform", "rotate(-90)")
                  .attr("y", 6)
                  .attr("dy", ".71em")
                  .style("text-anchor", "end")
                  .text("Number of Associated Users");

              // draw dots
              svg.selectAll(".dot")
                  .data(data)
                .enter().append("circle")
                  .attr("class", "dot")
                  .attr("r", 3.5)
                  .attr("cx", xMap)
                  .attr("cy", yMap)
                  .style("fill", function(d) { return color(cValue(d));}) 
                  .on("mouseover", function(d) {
                      tooltip.transition()
                           .duration(200)
                           .style("opacity", .9);
                      tooltip.html(d.name + "<br/> (" + xValue(d) 
                      + ", " + yValue(d) + ")")
                           .style("left", (d3.event.pageX + 5) + "px")
                           .style("top", (d3.event.pageY - 28) + "px");
                  })
                  .on("mouseout", function(d) {
                      tooltip.transition()
                           .duration(500)
                           .style("opacity", 0);
                  });

              // draw legend
              var legend = svg.selectAll(".legend")
                  .data(color.domain())
                .enter().append("g")
                  .attr("class", "legend")
                  .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

              // draw legend colored rectangles
              legend.append("rect")
                  .attr("x", width - 9)
                  .attr("width", 9)
                  .attr("height", 9)
                  .style("fill", color);

              // draw legend text
              legend.append("text")
                  .attr("x", width - 24)
                  .attr("y", 9)
                  .attr("dy", ".35em")
                  .style("text-anchor", "end")
                  .text(function(d) { return d;})
          },
          error: function( status ) {
          console.log("failed");
          }
  })
}





function SocialGraph(username) {
  d3.select("svg").selectAll("*").remove();
  var responsei = $.ajax({
          url: "http://localhost:8081/socialGraph/".concat(username),
          type: "get",
          contentType: "text/plain",
          dataType: "json",
          crossDomain:true,
          success: function( response ) {
              console.log(response); // server response
              var nodeMap = {};

              function findValue(array, nameWeAreLookingFor) {
                 for(var i = 0; i<array.length; i++) {
                     if(array[i].id === nameWeAreLookingFor) return i;
                 }
                 return -1;
              };
            

              var svg = d3.select("svg"),
                  width = +svg.attr("width"),
                  height = +svg.attr("height");

              var color = d3.scaleOrdinal(d3.schemeCategory20);

              var simulation = d3.forceSimulation()
                  .force("link", d3.forceLink().id(function(d) { return d.id; }))
                  .force("charge", d3.forceManyBody())
                  .force("center", d3.forceCenter(width / 2, height / 2));

              var link = svg.append("g")
                  .attr("class", "links")
                .selectAll("line")
                .data(response.links)
                .enter().append("line")
                  .attr("stroke-width", function(d) { return Math.sqrt(1); });

              var node = svg.append("g")
                  .attr("class", "nodes")
                .selectAll("circle")
                .data(response.nodes)
                .enter().append("circle")
                  .attr("r", 5)
                  .attr("fill", function(d) { return color(d.group); })
                  .call(d3.drag()
                      .on("start", dragstarted)
                      .on("drag", dragged)
                      .on("end", dragended));

              node.append("title")
                  .text(function(d) { return d.id; });

              simulation
                  .nodes(response.nodes)
                  .on("tick", ticked);

              simulation.force("link")
                  .links(response.links);

              function ticked() {
                link
                    .attr("x1", function(d) { return d.source.x; })
                    .attr("y1", function(d) { return d.source.y; })
                    .attr("x2", function(d) { return d.target.x; })
                    .attr("y2", function(d) { return d.target.y; });

                node
                    .attr("cx", function(d) { return d.x; })
                    .attr("cy", function(d) { return d.y; });
              }

            function dragstarted(d) {
              if (!d3.event.active) simulation.alphaTarget(0.3).restart();
              d.fx = d.x;
              d.fy = d.y;
            }

            function dragged(d) {
              d.fx = d3.event.x;
              d.fy = d3.event.y;
            }

            function dragended(d) {
              if (!d3.event.active) simulation.alphaTarget(0);
              d.fx = null;
              d.fy = null;
            }
        },
        error: function( status ) {
          console.log("failed");
        }
    })
}
